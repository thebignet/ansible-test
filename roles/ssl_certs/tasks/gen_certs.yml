---
- name: include cert vars
  include_vars: vars/cert_vars.yml

- name: create server keys dir on all nodes
  file: path="{{ cert_dir }}" state=directory
  sudo: yes
  register: create_key_dir

- name: find keytool application
  shell: find / -name keytool 2>/dev/null | grep "1.{{ java_version }}.0_{{ java_subversion }}" | head -1 | grep keytool
  register: keytool_find
  changed_when: false

- name: create ssl keystores
  shell: "{{ keytool_find['stdout'] }} -genkey -keyalg RSA -alias {{ item }} -keystore {{ cert_dir }}/{{ item }}.jks -storepass {{ keystore_default_pass }} -validity 360 -keysize 2048 -dname cn={{ item }},ou=Bigdata,o=Hadoop,c=UK -keypass {{ key_default_pass }}"
  with_flattened:
    - groups.all
    - ranger_certs
  sudo: yes
  args:
    creates: "{{ cert_dir }}/{{ item }}.jks"
  when: "inventory_hostname == groups['directoryservices'][0] or item != '127.0.0.1'"
  register: create_keys

- name: create ssl certificates and import into truststore
  shell: "{{ keytool_find['stdout'] }} -export -keystore {{ cert_dir }}/{{ item }}.jks -alias {{ item }} -file {{ cert_dir }}/{{ item }}.crt -storepass {{ keystore_default_pass }}; {{ keytool_find['stdout'] }} -import -file {{ cert_dir }}/{{ item }}.crt -alias {{ item }} -keystore {{ cert_dir }}/clusterTrustStore.jks -storepass {{ truststore_default_pass }} -trustcacerts -noprompt"
  with_flattened:
    - groups.all
    - ranger_certs
  sudo: yes
  args:
    creates: "{{ cert_dir }}/{{ item }}.crt"
  when: "inventory_hostname == groups['directoryservices'][0] or item != '127.0.0.1'"
  register: create_keys

- name: create temp folder on remote fs
  file: path="{{ temp_remote_path }}" state=directory
  when: "create_keys.changed and inventory_hostname == groups['directoryservices'][0]"

- name: tar up certs if they have changed
  shell: "tar -czf {{ temp_remote_path }}/{{ tar_filename }} -C {{ cert_dir }} {*.jks,*.crt}"
  args:
    chdir: "{{ cert_dir }}"
  when: "create_keys.changed and inventory_hostname == groups['directoryservices'][0]"

- name: create temp folder on local fs
  file: path="{{ temp_local_path }}" state=directory
  when: "create_keys.changed and inventory_hostname == groups['directoryservices'][0]"
  delegate_to: 127.0.0.1

- name: fetch the cert bundle
  fetch: dest="{{ temp_local_path }}" src="{{ temp_remote_path }}/{{ tar_filename }}" flat=yes fail_on_missing=yes
  when: "create_keys.changed and inventory_hostname == groups['directoryservices'][0]"

- name: check if we have a tar bundle to work on
  stat: path="{{ temp_local_path }}/{{ tar_filename }}"
  delegate_to: 127.0.0.1
  register: tar_stat

- name: unpack tar to remote nodes
  unarchive: src="{{ temp_local_path }}/{{ tar_filename }}" dest="{{ cert_dir }}"
  sudo: yes
  when: tar_stat.stat.exists

- name: remove temp folder on remote fs
  file: path="{{ temp_remote_path }}" state=absent
  when: "create_keys.changed and inventory_hostname == groups['directoryservices'][0]"

- name: create temp folder on local fs
  file: path="{{ temp_local_path }}" state=absent
  when: "create_keys.changed and inventory_hostname == groups['directoryservices'][0]"
  delegate_to: 127.0.0.1

- name: import certs into java truststore
  shell: "{{ keytool_find['stdout'] }} -list -v -keystore {{ java_truststore_location }} -storepass {{ java_truststore_default_pass }} | grep {{ item }} || {{ keytool_find['stdout'] }} -import -file {{ cert_dir }}/{{ item }}.crt -alias {{ item }} -keystore {{ java_truststore_location }} -storepass {{ java_truststore_default_pass }} -trustcacerts -noprompt"
  with_flattened:
    - groups.all
    - ranger_certs
  sudo: yes
  register: java_truststore
  changed_when: "'Certificate was added to keystore' in java_truststore.stderr"
  when: "item != '127.0.0.1'"
